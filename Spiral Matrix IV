/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> spiralMatrix(int n, int m, ListNode* head) {
        int sr = 0, sc = 0;
        int dir = 0;
        vector<vector<int>> arr(n, vector<int>(m, -1));
        while(head){
            arr[sr][sc] = head->val;
            head = head->next;
            if(dir == 0){
                sc++;
                if(sc == m or arr[sr][sc] != -1){
                    sc--;
                    sr++;
                    dir = 1;
                }
            }
            else if(dir == 1){
                sr++;
                if(sr == n or arr[sr][sc] != -1){
                    sr--;
                    sc--;
                    dir = 2;
                }
            }
            else if(dir == 2){
                sc--;
                if(sc < 0 or arr[sr][sc] != -1){
                    sc++;
                    sr--;
                    dir = 3;
                }
            }
            else if(dir == 3){
                sr--;
                if(sr < 0 or arr[sr][sc] != -1){
                    sr++;
                    sc++;
                    dir = 0;
                }
            }
        }
        return arr;
    }
};
